TURBO FRAME: 
When clicking on a link within a Turbo Frame, if there is a frame with the same id on the target page, 
Turbo will replace the content of the Turbo Frame of the source page with the content of the Turbo Frame of the target page.

When clicking on a link within a Turbo Frame, if there is no Turbo Frame with the same id on the target page, Turbo will remove 
the content of the Turbo Frame from the source page and log an error. 

A link can target a Turbo Frame it is not directly nested in, thanks to the data-turbo-frame data attribute. 
In that case, the Turbo Frame with the same id as the data-turbo-frame data attribute on the source page will be replaced 
by the Turbo Frame of the same id as the data-turbo-frame data attribute on the target page. 

When using the "_top" keyword, the URL of the page changes to the URL of the target page, 
which is another difference from when using a regular Turbo Frame.

# If the quote is persisted and its id is 1:
dom_id(@quote) # => "quote_1"

# If the quote is a new record:
dom_id(Quote.new) # => "new_quote"

# Note that the dom_id can also take an optional prefix argument
# We will use this later in the tutorial
dom_id(Quote.new, "prefix") # "prefix_new_quote"
The turbo_frame_tag helper automatically passes the given object to dom_id

# Remove a Turbo Frame
turbo_stream.remove

# Insert a Turbo Frame at the beginning/end of a list
turbo_stream.append
turbo_stream.prepend

# Insert a Turbo Frame before/after another Turbo Frame
turbo_stream.before
turbo_stream.after

# Replace or update the content of a Turbo Frame
turbo_stream.update
turbo_stream.replace
except for the remove method, the turbo_stream helper expects a partial and locals as arguments to know which HTML it needs to append, prepend, replace from the DOM.

#Stream
compare to respond to in the controller is that
the HTML is delivered via WebSocket this time instead of in response to an AJAX request

    after_create_commit -> { broadcast_prepend_to "quotes", partial: "quotes/quote", locals: { quote: self }, target: "quotes" }
By default, the target option will be equal to model_name.plural
The partial default value is equal to calling to_partial_path on an instance of the model,
which by default in Rails for our Quote model is equal to "quotes/quote".
The locals default value is equal to { model_name.element.to_sym => self }
which, in the context of our Quote model, is equal to { quote: self }.

The broadcast_remove_later_to method does not exist because as the quote gets deleted from the database,
it would be impossible for a background job to retrieve this quote in the database later to perform the job.

    after_create_commit -> { broadcast_prepend_later_to "quotes" }
    after_update_commit -> { broadcast_replace_later_to "quotes" }
    after_destroy_commit -> { broadcast_remove_to "quotes" }
Those three callbacks are equivalent to the following single line
  broadcasts_to ->(quote) { "quotes" }, inserts_by: :prepend

In our Quote model, we set three callbacks to broadcast creations, updates, and deletions to the "quotes" stream. Thanks to the broadcasts_to method, those three callbacks can be defined in one line.
In our Quotes#index view, we explicitly mentioned that we want to subscribe to the changes that are broadcasted to the "quotes" stream.
####
rails g devise User
#####
Declare a controller method as a helper. For example, the following
     makes the `current_user` and `logged_in?` controller methods available
     to the view:

         class ApplicationController < ActionController::Base
           helper_method :current_user, :logged_in?

           private
             def current_user
               @current_user ||= User.find_by(id: session[:user])
             end

             def logged_in?
               current_user != nil
             end
         end

     In a view:

         <% if logged_in? -%>Welcome, <%= current_user.name %><% end -%>
######
broadcasts_to ->(quote) { [quote.company, "quotes"] }, inserts_by: :prepend
Under the hood, the signed stream name is generated from the array returned by the lambda that is the first argument of the broadcasts_to method. The rules for secure broadcastings are the following:

Users who share broadcastings should have the lambda return an array with the same values.
Users who shouldn't share broadcastings should have the lambda return an array with different values.

###
# Syntax 1
redirect_to quotes_path, notice: "Quote was successfully created."

# Syntax 2
flash[:notice] = "Quote was successfully created."
redirect_to quotes_path

  <div
    class="flash__message"
    data-controller="removals"
    data-action="animationend->removals#remove"
  >

  The HTML snippet above suggests that each flash message is connected to a RemovalsController thanks to the data-controller="removals" data attribute. When the animation ends, the function remove of the RemovalsController is called thanks to the data-action="animationend->removals#remove data attribute.
