TURBO FRAME: 
When clicking on a link within a Turbo Frame, if there is a frame with the same id on the target page, 
Turbo will replace the content of the Turbo Frame of the source page with the content of the Turbo Frame of the target page.

When clicking on a link within a Turbo Frame, if there is no Turbo Frame with the same id on the target page, Turbo will remove 
the content of the Turbo Frame from the source page and log an error. 

A link can target a Turbo Frame it is not directly nested in, thanks to the data-turbo-frame data attribute. 
In that case, the Turbo Frame with the same id as the data-turbo-frame data attribute on the source page will be replaced 
by the Turbo Frame of the same id as the data-turbo-frame data attribute on the target page. 

When using the "_top" keyword, the URL of the page changes to the URL of the target page, 
which is another difference from when using a regular Turbo Frame.

# If the quote is persisted and its id is 1:
dom_id(@quote) # => "quote_1"

# If the quote is a new record:
dom_id(Quote.new) # => "new_quote"

# Note that the dom_id can also take an optional prefix argument
# We will use this later in the tutorial
dom_id(Quote.new, "prefix") # "prefix_new_quote"
The turbo_frame_tag helper automatically passes the given object to dom_id

# Remove a Turbo Frame
turbo_stream.remove

# Insert a Turbo Frame at the beginning/end of a list
turbo_stream.append
turbo_stream.prepend

# Insert a Turbo Frame before/after another Turbo Frame
turbo_stream.before
turbo_stream.after

# Replace or update the content of a Turbo Frame
turbo_stream.update
turbo_stream.replace
except for the remove method, the turbo_stream helper expects a partial and locals as arguments to know which HTML it needs to append, prepend, replace from the DOM.